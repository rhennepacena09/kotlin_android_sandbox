ext{
    androidXPackage         = 'androidx'
    jetbrainsKotlinPackage  = 'org.jetbrains.kotlin'
    googlePackage           = 'com.google.android'
    kotlinPackage           = 'org.jetbrains.kotlin'
    lifecyclePackage        = 'androidx.lifecycle'
    daggerPackage           = 'com.google.dagger'
    reactivexPackage        = 'io.reactivex'
    squareupPackage         = 'com.squareup'
    junitPackage            = 'junit'
    jakewhartonPackage      = 'com.jakewharton'
    androidArchPackage      = 'android.arch'
    amitshekarPackage       = 'com.amitshekhar'
    bumpTechPackage         = 'com.github.bumptech'
    databindingPackage      = 'com.android.databinding'
    deHdodenhofPackage      = 'de.hdodenhof'
    mockitoPackage          = 'org.mockito'


    junitVersion            = '4.12'
    junitTestVersion        = '1.1.1'
    runnerVersion           = '1.3.0-alpha02'
    annotationVersion       = '1.0.0-alpha01'
    androidArchCoreVersion  = '1.1.1'
    espressoVersion         = '3.2.0'
    lifecycleVersion        = '2.1.0'
    lifecycleVMVersion      = '2.0.0'
    ktxVersion              = '1.1.0'
    coreVersion             = '1.0.0'
    appCompatVersion        = '1.1.0'
    constraintVersion       = '2.0.0-beta4'
    recyclerVersion         = '1.0.0'
    daggerVersion           = '2.19'
    rxKotlinVersion         = '2.2.0'
    rxJavaAndroidVersion    = '2.1.0'
    rxAndroidVersion        = '1.2.1'
    retrofit2Version        = '2.4.0'
    okhttp3Version          = '3.4.1'
    adapterRxJavaVersion    = '2.3.0'
    timberVersion           = '4.7.1'
    roomVersion             = '2.1.0'
    materialIOVersion       = '1.1.0-alpha10'
    databaseDebugVersion    = '1.0.6'
    leakCanaryVersion       = '2.1'
    glideVersion            = '4.9.0'
    databindingVersion      = '3.1.4'
    circleViewVersion       = '3.0.0'
    androidxTestVersion     = '1.2.1'
    preferenceManagerVersion= '1.1.0'
    mockitoVersion          = '2.25.0'
    fragmentVersion         = '1.2.0-rc01'

    proguardDirectory = '../build-compile/proguard-rules'

    kotlinDependencies = [
            kotlin          : buildDependency(kotlinPackage, 'kotlin-stdlib-jdk7', kotlin_version),
            jetbrainsKotlin : buildDependency(jetbrainsKotlinPackage, 'kotlin-stdlib-jdk7', kotlin_version)

    ]



    androidXCoreDependencies =[
            annotations     : buildDependency("${androidXPackage}.annotation", 'annotation', annotationVersion),
            preferenceManager : buildDependency("${androidXPackage}.preference", 'preference-ktx', preferenceManagerVersion),
            ktx             : buildDependency("${androidXPackage}.core", 'core-ktx', ktxVersion),
            core            : buildDependency("${androidXPackage}.core", 'core', coreVersion),

            appCompat       : buildDependency("${androidXPackage}.appcompat", 'appcompat', appCompatVersion),
            constraint      : buildDependency("${androidXPackage}.constraintlayout", 'constraintlayout', constraintVersion),
            recyclerview    : buildDependency("${androidXPackage}.recyclerview", 'recyclerview', recyclerVersion),
            fragment        : buildDependency("${androidXPackage}.fragment", 'fragment', fragmentVersion),

    ]

    androidDesignPatterns    =[
            materialIO      : buildDependency("${googlePackage}.material", 'material', materialIOVersion),

            daggerCompiler  : buildDependency(daggerPackage, 'dagger-compiler', daggerVersion),
            dagger          : buildDependency(daggerPackage, 'dagger', daggerVersion),
            daggerAndroid   : buildDependency(daggerPackage, 'dagger-android', daggerVersion),

            rxKotlin        : buildDependency("${reactivexPackage}.rxjava2", 'rxkotlin', rxKotlinVersion),
            rxJavaAndroid   : buildDependency("${reactivexPackage}.rxjava2", 'rxandroid', rxJavaAndroidVersion),
            rxAndroid       : buildDependency(reactivexPackage, 'rxandroid', rxAndroidVersion),

            gson            : buildDependency("${squareupPackage}.retrofit2", 'converter-gson', retrofit2Version),
            retrofit2       : buildDependency("${squareupPackage}.retrofit2", 'retrofit', retrofit2Version),
            adapterRxJava   : buildDependency("${squareupPackage}.retrofit2", 'adapter-rxjava2', adapterRxJavaVersion),

            interceptor     : buildDependency("${squareupPackage}.okhttp3", 'logging-interceptor', okhttp3Version),
            okhttp3         : buildDependency("${squareupPackage}.okhttp3", 'okhttp', okhttp3Version),

            roomRuntime     : buildDependency("${androidXPackage}.room", 'room-runtime', roomVersion),
            roomKtx         : buildDependency("${androidXPackage}.room", 'room-ktx', roomVersion),
            roomTest        : buildDependency("${androidXPackage}.room", 'room-testing', roomVersion),
            roomCompiler    : buildDependency("${androidXPackage}.room", 'room-compiler', roomVersion),

            lifecycleViewMod: buildDependency("${androidXPackage}.lifecycle", 'lifecycle-viewmodel-ktx', lifecycleVMVersion),
            lifecycle       : buildDependency(lifecyclePackage, 'lifecycle-extensions', lifecycleVersion),
            lifecycleLiveDat: buildDependency(lifecyclePackage, 'lifecycle-livedata-ktx', lifecycleVersion),

            databindingComp : buildDependency(databindingPackage, 'compiler', databindingVersion)
    ]

    otherExternalLibraries = [

            dbDebuggerView  : buildDependency("${amitshekarPackage}.android", 'debug-db', databaseDebugVersion),
            leakCanary      : buildDependency("${squareupPackage}.leakcanary", 'leakcanary-android', leakCanaryVersion),
            glide           : buildDependency("${bumpTechPackage}.glide", 'glide', glideVersion),
            glideCompiler   : buildDependency("${bumpTechPackage}.glide", 'compiler', glideVersion),

            timber          : buildDependency("${jakewhartonPackage}.timber", 'timber', timberVersion),

            circleImageView : buildDependency(deHdodenhofPackage,'circleimageview',circleViewVersion)
    ]

    testingDependencies = [
            runner          : buildDependency("${androidXPackage}.test", 'runner', runnerVersion),
            testCore        : buildDependency("${androidXPackage}.test", 'core', runnerVersion),
            junit           : buildDependency("${junitPackage}", 'junit', junitVersion),
            junitTest       : buildDependency("${androidXPackage}.test.ext", 'junit-ktx', junitTestVersion),
            rules           : buildDependency("${androidXPackage}.test", 'rules', junitVersion),
            espresso        : buildDependency("${androidXPackage}.test.espresso", 'espresso-core', espressoVersion),
            espressoContrib : buildDependency("${androidXPackage}.test.espresso", 'espresso-contrib', espressoVersion),
            espressoIntent  : buildDependency("${androidXPackage}.test.espresso", 'espresso-intents', espressoVersion),
            espressoIdling  : buildDependency("${androidXPackage}.test.espresso", 'espresso-idling-resource', espressoVersion),
            mockitoCore     : buildDependency(mockitoPackage, 'mockito-core', mockitoVersion),
            mockitoAndroid  : buildDependency(mockitoPackage, 'mockito-android', mockitoVersion),
            fragmentTest    : buildDependency("${androidXPackage}.fragment", 'fragment-testing', fragmentVersion)
    ]

    archDependencies = [
            archCore        : buildDependency("${androidArchPackage}.core", 'core-testing', androidArchCoreVersion),
            roompersistence : buildDependency("${androidArchPackage}.persistence.room", 'rxjava2', androidArchCoreVersion),
            lifecycleComp   : buildDependency("${androidArchPackage}.lifecycle", 'compiler', androidArchCoreVersion)
    ]
}

static String buildDependency(String pack, String dependency, String version) {
    return "${pack}:${dependency}:${version}"
}